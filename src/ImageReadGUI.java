/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Aditya
 */
public class ImageReadGUI extends javax.swing.JFrame {

    /**
     * Creates new form ImageReadGUI
     */
    public ImageReadGUI() {
        this.selectedBit = -1;
        this.bgValue = -1;
        this.toValue = -1;
        this.fromValue = -1;
        this.fgValue = -1;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLayeredPane1 = new javax.swing.JLayeredPane();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setSize(new java.awt.Dimension(800, 800));

        jLabel1.setText("Click on Load Button To load Image");

        jButton1.setText("Load");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Save");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel2.setText("Select a Transform");

        jCheckBox1.setLabel("Use Greyscale Image");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Transformation", "RGB To Grayscale", "Negative", "Intensity Slicing", "Bit Plane Slicing", "Contrast Stretching", "Smoothing Filters", "Sharpening Filters", "Histogram", "Histogram Equalization", "Optimal Thresholding", "Gray Scale Erosion" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel3.setText("To:");

        jLabel4.setText("From:");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jLabel5.setText("FGValue:");

        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        jLabel6.setText("Background(Optional):");

        jTextField4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField4ActionPerformed(evt);
            }
        });

        jButton3.setText("Transform");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel7.setForeground(new java.awt.Color(255, 0, 0));
        jLabel7.setText("Error label");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Filter" }));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2)
                        .addGap(18, 18, 18)
                        .addComponent(jCheckBox1)
                        .addGap(44, 44, 44)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(5, 5, 5)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)
                                .addComponent(jLabel5)
                                .addGap(7, 7, 7)
                                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 512, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 512, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6)
                        .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton3)
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton1)
                        .addComponent(jButton2)
                        .addComponent(jCheckBox1)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5)
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /*-----------------------LOAD BUTTON CODE FUNCTION----------------------------------------------------*/
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Load Button Code:
        BufferedImage image = null;
        JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(new File("./"));
        fc.setDialogTitle("Select Image");
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fc.setFileFilter(new FileNameExtensionFilter("Images", "jpg", "png", "gif", "bmp"));
        if (fc.showOpenDialog(jButton1) == JFileChooser.APPROVE_OPTION) {
            try { // Load image
                f = fc.getSelectedFile();
                image = ImageIO.read(f);
                Image dimg = image.getScaledInstance(jLabel2.getWidth(), jLabel2.getHeight(), Image.SCALE_SMOOTH);
                ImageIcon icon = new ImageIcon(dimg);
                jLabel1.setText(null);
                jLabel1.setIcon(icon);
//                jLabel2.setText(null);
//                jLabel2.setIcon(icon);
                jComboBox1.setEnabled(true);
                jCheckBox1.setEnabled(true);
                jButton2.setEnabled(true);
                this.jComboBox1ActionPerformed(evt);
            } catch (IOException e) {
                System.out.println("Error: " + e);
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed
    /*-----------------------------LOAD BUTTON CODE FUNCTION END----------------------------------------------------*/

 /*-----------------------------SAVE BUTTON CODE FUNCTION----------------------------------------------------*/
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // Save Button Code:
        File f1 = null;
        if (fTrans == null) {
            f1 = new File(f.getAbsolutePath());
        } else {
            f1 = new File(fTrans.getAbsolutePath());
        }
        BufferedImage image = null;
        JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(new File("./"));
        fc.setDialogTitle("Save Image");
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fc.setFileFilter(new FileNameExtensionFilter("Images", "jpg", "png", "gif", "bmp"));
        if (fc.showOpenDialog(jButton2) == JFileChooser.APPROVE_OPTION) {
            try { // write image
                image = ImageIO.read(f1);
                File fw = new File(fc.getSelectedFile().getAbsolutePath() + ".jpg");
                ImageIO.write(image, "jpg", fw);
                System.out.println("Image Saved.");
            } catch (IOException e) {
                System.out.println("Error: " + e);
            }
        }

    }//GEN-LAST:event_jButton2ActionPerformed
    /*-----------------------------SAVE BUTTON CODE FUNCTION END----------------------------------------------------*/

 /*-----------------------------GREY SCALE CHECKBOX CODE FUNCTION----------------------------------------------------*/
    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:
        GreyFlag = jCheckBox1.isSelected();
        if (this.jComboBox1.getSelectedItem().toString().equals("Smoothing Filters")
                || this.jComboBox1.getSelectedItem().toString().equals("Sharpening Filters")) {
            jComboBox2ActionPerformed(evt);
        } else {
            jComboBox1ActionPerformed(evt);
        }
    }//GEN-LAST:event_jCheckBox1ActionPerformed
    /*-----------------------------GREY SCALE CHECKBOX CODE FUNCTION END----------------------------------------------------*/

 /*-----------------------------TRANSFORMATION COMBOBOX CODE FUNCTION----------------------------------------------------*/
    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
        String operator = jComboBox1.getSelectedItem().toString();
        try {
            ImageCompare IgCm = new ImageCompare();
            String[] SmoothingFilters = {"Box Filter", "Weighted Avg Filter", "Median Filter"};
            String[] SharpeningFilters = {"Laplacian Filter", "Sobel Filter", "Prewitt Filter"};
            RGBtoGrey GreyTrans;
            Histogram Hist;
            BufferedImage transform = ImageIO.read(f);
            setFalseExtraFields();
            if (GreyFlag) {
                GreyTrans = new RGBtoGrey(transform);
                transform = GreyTrans.getImg();
            }
            setGreyCheckBoxEnabled();
            switch (operator) {
                case "Select Transformation":
                    // Code to Clear Image
                    clearTransformedImage("Select a Transform");
                    break;
                
                case "RGB To Grayscale":
                    // RGB to Greyscale code
                    setGreyCheckBoxDisabled();
                    GreyTrans = new RGBtoGrey(transform);
                    transform = GreyTrans.getImg();
                    setTransformedImage(transform);
                    break;
                
                case "Negative":
//                Neagtive of Image Code
                    Negative NegTrans = new Negative(transform);
                    transform = NegTrans.getImg();
                    setTransformedImage(transform);
                    break;
                
                case "Intensity Slicing":
//                INTENSITY SLICING FUNCTION SETUP
                    setGreyCheckBoxDisabled();
                    clearTransformedImage("Enter Corresponding Values");
                    clearTextFields();
                    setIntensitySlicingFields();
                    break;
                case "Bit Plane Slicing":
                    setGreyCheckBoxDisabled();
                    clearTransformedImage("Enter Bit Position");
                    clearTextFields();
                    setBitPlaneSlicingFields();
                    break;
                case "Contrast Stretching":
                    ContrastStretching ContStr = new ContrastStretching(transform);
                    transform = ContStr.getImg();
                    setTransformedImage(transform);
                    break;
                case "Smoothing Filters":
                    clearComboBox2();
                    setComboBox2(SmoothingFilters);
                    jComboBox2ActionPerformed(evt);
                    break;
                case "Sharpening Filters":
                    clearComboBox2();
                    setComboBox2(SharpeningFilters);
                    jComboBox2ActionPerformed(evt);
                    break;
                case "Histogram":
                    setGreyCheckBoxDisabled();
                    GreyTrans = new RGBtoGrey(transform);
                    transform = GreyTrans.getImg();
                    Hist = new Histogram(transform);
                    transform = Hist.getHistImg();
                    setTransformedImage(transform);
                    break;
                case "Histogram Equalization":
                    setGreyCheckBoxDisabled();
                    GreyTrans = new RGBtoGrey(transform);
                    transform = GreyTrans.getImg();
                    Hist = new Histogram(transform);
                    BufferedImage Hist1 = Hist.getHistImg();
                    int originalHist[] = Hist.getHist();
                    HistogramEqualization Heq = new HistogramEqualization(transform, originalHist);
                    transform = Heq.getImg();
                    setTransformedImage(transform);
                    transform = ImageIO.read(fTrans);
                    BufferedImage Hist2 = new Histogram(transform).getHistImg();
                    IgCm.setVisible(true);
                    IgCm.setTransformedImage(Hist1, Hist2);
                    break;
                case "Optimal Thresholding":
                    setGreyCheckBoxDisabled();
                    GreyTrans = new RGBtoGrey(transform);
                    transform = GreyTrans.getImg();
                    OptimalThresholding Oth = new OptimalThresholding(transform);
                    int Th = Oth.getFinalThreshold();
                    IntensitySlicing IST = new IntensitySlicing(transform, 0, Th, 0, 255);
                    transform = IST.getImg();
                    setTransformedImage(transform);
                    break;
                case "Gray Scale Erosion":
                    setGreyCheckBoxDisabled();
                    GreyTrans = new RGBtoGrey(transform);
                    transform = GreyTrans.getImg();
                    GrayScaleErosion GSE = new GrayScaleErosion(transform);
                    transform = GSE.getImg();
                    setTransformedImage(transform);
                    break;
                default:
                    throw new AssertionError();
            }
        } catch (IOException ex) {
            Logger.getLogger(ImageReadGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jComboBox1ActionPerformed
    /*-----------------------------TRANSFORMATION COMBOBOX CODE FUNCTION END----------------------------------------------------*/

 /*-----------------------------INPUT TEXT CODE FUNCTIONS START----------------------------------------------------*/
    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
        try {
            int aValue = Integer.parseInt(this.jTextField3.getText().trim());
            String op = this.jComboBox1.getSelectedItem().toString();
            switch (op) {
                case "Intensity Slicing":
                    if (aValue <= 255 && aValue >= 0) {
                        this.fgValue = aValue;
                    } else {
                        this.fgValue = -1;
                        this.setErrorLabel("FGValue must be between 0 and 255");
                    }
                    break;
                default:
                    throw new AssertionError();
            }
        } catch (NumberFormatException e) {
            this.fgValue = -1;
            this.setErrorLabel("FGValue must be an interger");
        }
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void jTextField4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField4ActionPerformed
        // TODO add your handling code here:
        if (this.jTextField4.getText().trim().equals("")) {
            this.bgValue = -1;
            return;
        }
        try {
            int aValue = Integer.parseInt(this.jTextField4.getText().trim());
            String op = this.jComboBox1.getSelectedItem().toString();
            switch (op) {
                case "Intensity Slicing":
                    if (aValue <= 255 && aValue >= 0) {
                        this.bgValue = aValue;
                    } else {
                        this.bgValue = -2;
                        this.setErrorLabel("BGValue must be between 0 and 255");
                    }
                    break;
                default:
                    throw new AssertionError();
            }
        } catch (NumberFormatException e) {
            this.bgValue = -2;
            this.setErrorLabel("BGValue must be an interger");
        }
    }//GEN-LAST:event_jTextField4ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
//        if(this.jTextField1.getText().equals("")){
//            return;
//        }
        try {
            int aValue = Integer.parseInt(this.jTextField1.getText().trim());
            String op = this.jComboBox1.getSelectedItem().toString();
            switch (op) {
                case "Intensity Slicing":
                    if (aValue <= 255 && aValue >= 0) {
                        this.fromValue = aValue;
                    } else {
                        this.fromValue = -1;
                        this.setErrorLabel("FromValue must be between 0 and 255");
                    }
                    break;
                case "Bit Plane Slicing":
                    if (aValue <= 7 && aValue >= 0) {
                        this.selectedBit = aValue;
                    } else {
                        this.selectedBit = -1;
                        this.setErrorLabel("Bit Pos must be between 0 and 7");
                    }
                    break;
                
                default:
                    throw new AssertionError();
            }
        } catch (NumberFormatException e) {
            this.setErrorLabel("FromValue must be an interger");
            this.fromValue = -1;
            if (this.jComboBox1.getSelectedItem().toString().equals("Bit Plane Slicing")) {
                this.selectedBit = -1;
                this.setErrorLabel("Bit Position must be an interger");
            }
        }
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
        try {
            int aValue = Integer.parseInt(this.jTextField2.getText().trim());
            String op = this.jComboBox1.getSelectedItem().toString();
            switch (op) {
                case "Intensity Slicing":
                    if (aValue <= 255 && aValue >= 0) {
                        this.toValue = aValue;
                    } else {
                        this.toValue = -1;
                        this.setErrorLabel("ToValue must be between 0 and 255");
                    }
                    break;
                default:
                    throw new AssertionError();
            }
        } catch (NumberFormatException e) {
            this.toValue = -1;
            this.setErrorLabel("ToValue must be an interger");
        }
    }//GEN-LAST:event_jTextField2ActionPerformed
    /*-----------------------------INPUT TEXT CODE FUNCTIONS END----------------------------------------------------*/

 /*-----------------------------TRANSFORM BUTTON CODE FUNCTION----------------------------------------------------*/
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        String op = this.jComboBox1.getSelectedItem().toString();
        RGBtoGrey GreyTrans = null;
        BufferedImage transform;
        try {
            transform = ImageIO.read(f);
            switch (op) {
                case "Intensity Slicing":
                    //INTENSITY SLICING CODE:
                    //CLEAR PREVIOUS TRANSFORMED IMAGE
                    clearTransformedImage("Enter Corresponding Values");

                    //INPUT VALIDATION
                    this.jTextField4ActionPerformed(evt);
                    this.jTextField3ActionPerformed(evt);
                    this.jTextField2ActionPerformed(evt);
                    this.jTextField1ActionPerformed(evt);

                    //TO USE GREYSCALE IMAGE
                    GreyTrans = new RGBtoGrey(transform);
                    transform = GreyTrans.getImg();

                    //VALUE SET CHECK FOR ERROR
                    if (this.toValue == -1 || this.fromValue == -1 || this.fgValue == -1) {
                        break;
                    }

                    //FROM AND TO VALUE CHECK
                    if (this.fromValue > this.toValue) {
                        this.setErrorLabel("FromValue cannot be greater than ToValue");
                        break;
                    }

                    //BACKGROUD AND FOREGROUD VALUE CHECK
                    if (this.bgValue >= this.fgValue) {
                        this.setErrorLabel("BGvalue must be less than FGValue");
                        break;
                    }

                    //BG Value Error Check to Clear Error Label
                    if (this.bgValue != -2) {
                        this.clearErrorLabel();
                    }
                    if (this.bgValue == -1 || this.bgValue == -2) {
                        //INTENSITY SLICING WITH RETAINING BACKGROUND
                        IntensitySlicing IST = new IntensitySlicing(transform, this.fromValue, this.toValue, this.fgValue);
                        transform = IST.getImg();
                        setTransformedImage(transform);
                    } else {
                        //INTENSITY SLICING WITH LOWERING BACKGROUND
                        IntensitySlicing IST = new IntensitySlicing(transform, this.fromValue, this.toValue, this.fgValue, this.bgValue);
                        transform = IST.getImg();
                        setTransformedImage(transform);
                    }
                    break;
                
                case "Bit Plane Slicing":
                    //BIT PLANE SLICING CODE
                    //CLEAR PREVIOUS TRANSFORMED IMAGE
                    clearTransformedImage("Enter Bit Position");

                    //INPUT VALIDATION
                    this.jTextField1ActionPerformed(evt);

                    //TO USE GREYSCALE IMAGE
                    GreyTrans = new RGBtoGrey(transform);
                    transform = GreyTrans.getImg();

                    //VALUE SET CHECK FOR ERROR
                    if (this.selectedBit == -1) {
                        break;
                    }
                    this.clearErrorLabel();

                    //Get Image at Specified bit
                    BitPlaneSlicing BPS = new BitPlaneSlicing(transform, 7 - this.selectedBit); //SINCE BINARY STRING IS REVERSED
                    transform = BPS.getImg();
                    setTransformedImage(transform);
                    break;
                
                default:
                    throw new AssertionError();
            }
        } catch (IOException ex) {
            Logger.getLogger(ImageReadGUI.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jButton3ActionPerformed
    /*-----------------------------TRANSFORM BUTTON CODE FUNCTION END----------------------------------------------------*/

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        // TODO add your handling code here:
        String op = this.jComboBox2.getSelectedItem().toString();
        RGBtoGrey GreyTrans;
        BufferedImage transform;
        SmoothingFilters SmFilter;
        SharpeningFilters SpFilter;
        try {
            transform = ImageIO.read(f);
            if (GreyFlag) {
                GreyTrans = new RGBtoGrey(transform);
                transform = GreyTrans.getImg();
            }
            switch (op) {
                case "Select Filter":
                    // Code to Clear Image
                    clearTransformedImage("Select a Filter");
                    break;

//                Smoothing Filters
                case "Box Filter":
//                Box Filter
                    SmFilter = new BoxFilter(transform);
                    transform = SmFilter.getImg();
                    setTransformedImage(transform);
                    break;
                
                case "Weighted Avg Filter":
//                Weighted Averaging filter
                    SmFilter = new WeightedAvgFilter(transform);
                    transform = SmFilter.getImg();
                    setTransformedImage(transform);
                    break;
                case "Median Filter":
//                Median filter
                    SmFilter = new MedianFilter(transform);
                    transform = SmFilter.getImg();
                    setTransformedImage(transform);
                    break;

//                    Sharpening Filters
                case "Laplacian Filter":
//                 Laplacian Filter
//                    SmFilter = new MedianFilter(transform);
//                    transform = SmFilter.getImg();
                    SpFilter = new LaplacianFilter(transform);
                    transform = SpFilter.getImg();
                    setTransformedImage(transform);
                    break;
                
                case "Sobel Filter":
//                Sobel Filter
//                    SmFilter = new MedianFilter(transform);
//                    transform = SmFilter.getImg();
                    SpFilter = new SobelFilter(transform);
                    transform = SpFilter.getImg();
                    setTransformedImage(transform);
                    break;
                case "Prewitt Filter":
//                 Prewitt Filter
//                    SmFilter = new MedianFilter(transform);
//                    transform = SmFilter.getImg();
                    SpFilter = new PrewittFilter(transform);
                    transform = SpFilter.getImg();
                    setTransformedImage(transform);
                    break;
                default:
                    throw new AssertionError();
            }
        } catch (IOException ex) {
            Logger.getLogger(ImageReadGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jComboBox2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ImageReadGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ImageReadGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ImageReadGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ImageReadGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() { //INITIAL SATE OF GUI
                ImageReadGUI IRG = new ImageReadGUI();
                IRG.setVisible(true);
                IRG.setFalseExtraFields();
                IRG.jComboBox1.setEnabled(false);
                IRG.jCheckBox1.setEnabled(false);
                IRG.jButton2.setEnabled(false);
            }
        });
    }

    //HIDE ERROR LABEL
    public void clearErrorLabel() {
        this.jLabel7.setVisible(false);
    }

    //SET ERROR LABEL WITH PROVIDED ERROR
    public void setErrorLabel(String error) {
        this.jLabel7.setText("Error: " + error);
        this.jLabel7.setVisible(true);
    }

    //HIDE ALL EXTRA INPUTS AND INPUT LABELS
    public void setFalseExtraFields() {
        jLabel3.setVisible(false);
        jLabel4.setVisible(false);
        jLabel5.setVisible(false);
        jLabel6.setVisible(false);
        jTextField1.setVisible(false);
        jTextField2.setVisible(false);
        jTextField3.setVisible(false);
        jTextField4.setVisible(false);
        jButton3.setVisible(false);
        //For Smoothing filters
        jComboBox2.setVisible(false);
        clearComboBox2();
        clearErrorLabel();
    }

    //DISPLAY INPUTS FOR INTENSITY SLICING
    public void setIntensitySlicingFields() {
        jLabel3.setVisible(true);
        jLabel4.setVisible(true);
        jLabel4.setText("From:");
        jLabel5.setVisible(true);
        jLabel6.setVisible(true);
        jTextField1.setVisible(true);
        jTextField2.setVisible(true);
        jTextField3.setVisible(true);
        jTextField4.setVisible(true);
        jButton3.setVisible(true);
    }

    //DISPLAY INPUTS FOR BIT PLANE SLICING
    public void setBitPlaneSlicingFields() {
        jLabel4.setVisible(true);
        jLabel4.setText("BitPos:");
        jTextField1.setVisible(true);
        jButton3.setVisible(true);
    }

    //CLEAR ALL TEXT FIELDS AND INPUT VARIABLES
    public void clearTextFields() {
        jTextField1.setText("");
        jTextField2.setText("");
        jTextField3.setText("");
        jTextField4.setText("");
        this.fromValue = -1;
        this.toValue = -1;
        this.fgValue = -1;
        this.bgValue = -1;
        this.selectedBit = -1;
    }

    //SET JCOMBOBOX2 OPTIONS
    public void setComboBox2(String Options[]) {
        for (String Option : Options) {
            jComboBox2.addItem(Option);
        }
        jComboBox2.setVisible(true);
    }

    //CLEAR JCOMBOBOX2 OPTIONS
    public void clearComboBox2() {
        for (int i = 1; i < jComboBox2.getItemCount(); i++) {
            jComboBox2.removeItemAt(i);
        }
    }

    //CLEAR ANY TRANSFORMED IMAGES
    public void clearTransformedImage(String Message) {
        fTrans = null;
        jLabel2.setText(Message);
        jLabel2.setIcon(null);
    }

    //SET TRANSFORMED IMAGE
    public void setTransformedImage(BufferedImage transform) throws IOException {
        Image dimg = transform.getScaledInstance(jLabel2.getWidth(), jLabel2.getHeight(), Image.SCALE_SMOOTH);
        ImageIcon icon = new ImageIcon(dimg);
        jLabel2.setText(null);
        jLabel2.setIcon(icon);
        fTrans = new File("./temp.jpg");
        ImageIO.write(transform, "jpg", fTrans);
    }

    //DISABLE GREY SCALE CHECK BOX
    public void setGreyCheckBoxDisabled() {
        jCheckBox1.setSelected(true); //TO SET CHECK BOX TRUE
        jCheckBox1.setEnabled(false);
    }

    //ENABLE GREY SCALE CHECK BOX
    public void setGreyCheckBoxEnabled() {
        if (!GreyFlag) { //RETAINIG PREVIOUS GREY SCALE CHECKBOX VALUE
            jCheckBox1.setSelected(false);
        }
        jCheckBox1.setEnabled(true);
    }
    
    private int selectedBit;  //BIT PLANE SLICING VARIABLE
    private int fromValue, toValue, fgValue, bgValue; //INTENSITY SLICING VARIABLES
    private File f = null, fTrans = null; //INPUT AND OUPUT IMAGE LOCATION VARIABLES
    private Boolean GreyFlag = false; //GRERY SCALE CHECKBOX FLAG
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    // End of variables declaration//GEN-END:variables
}
